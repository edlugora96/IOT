directive @auth(requires: [Role]) on OBJECT | FIELD_DEFINITION

enum Role {
  ADMIN
  REVIEWER
  USER
  UNKNOWN
}

union GlobalSearch = User | Project | Gadget

type User {
  ID: ID
  name: String
  email: String
  password: String @auth(requires: ADMIN)
  role: String
  scope: [String]
  gadgets: [Gadget]
  projects: [Project]
  birthday: String
  publicKey: String @auth(requires: ADMIN)
  privateKey: String @auth(requires: ADMIN)
  result: String
  creation: TimeControl!
  lastUpdate: TimeControl
  socialId: [String]
  labels: [String]
}
type Project @auth(requires: [ADMIN, USER]) {
  ID: ID
  name: String
  description: String
  gadgets: [Gadget]
  owner: User
  active: Boolean
  collaborators: [Collaborator]
  creation: TimeControl
  lastUpdate: TimeControl
  labels: [String]
  publicKey: String @auth(requires: ADMIN)
  privateKey: String @auth(requires: ADMIN)
}
"Is the modules (arduino/rasberrypi/...) has been connection to the server"
type Gadget @auth(requires: [ADMIN, USER]) {
  ID: ID
  name: String
  description: String
  owner: User
  project: Project
  value: String
  active: Boolean
  creation: TimeControl
  lastUpdate: TimeControl
  collaborators: [Collaborator]
  labels: [String]
  publicKey: String @auth(requires: ADMIN)
  privateKey: String @auth(requires: ADMIN)
}

type Login {
  idSocial: String
  token: String
}

input loginInput {
  username: String!
  password: String!
}

type Responses {
  ID: ID
  result: String
}
type TimeControl {
  user: User
  date: String
}
type Collaborator {
  user: User
  scope: String
}
type HighlightingSearch {
  body: [GlobalSearch]
  highlight: [[String]]
}

input timeControlInput {
  user: ID
  date: String
}

input userInput {
  name: String!
  email: String!
  role: String!
  password: String!
  birthday: String!
  labels: [String]
  gadgets: [ID]
  projects: [ID]
  lastUpdate: timeControlInput
  socialId: [String]
}

input updateUserInput {
  name: String
  email: String
  password: String
  birthday: String
  labels: [String]
  lastUpdate: timeControlInput
  socialId: [String]
}
input projectInput {
  name: String!
  description: String!
  labels: [String]
}
input roleInput {
  role: String!
  user: ID!
}
input updateProjectInput {
  name: String
  description: String
  collaborators: [ID]
  labels: [String]
}
input gadgetInput {
  name: String!
  description: String!
  project: ID!
  collaborators: [ID]
  value: String
  active: Boolean
  labels: [String]
}
input updateGadgetInput {
  name: String
  description: String
  collaborators: [ID]
  value: String
  active: Boolean
  labels: [String]
}

type Mutation {
  createUser(body: userInput): User!
  createProject(body: projectInput): Project! @auth(requires: [ADMIN, USER])
  createGadget(body: gadgetInput): Gadget! @auth(requires: [ADMIN, USER])
  updateUser(id: String!, body: updateUserInput): Responses!
    @auth(requires: [ADMIN, USER])
  updateProject(id: String!, body: updateProjectInput): Responses!
    @auth(requires: [ADMIN, USER])
  updateGadget(id: String!, body: updateGadgetInput): Responses!
    @auth(requires: [ADMIN, USER])
  deleteUser(id: String!): Responses! @auth(requires: [ADMIN, USER])
  deleteProject(id: String!): Responses! @auth(requires: [ADMIN, USER])
  deleteGadget(id: String!): Responses! @auth(requires: [ADMIN, USER])
  setRole(body: roleInput): Responses
  setScope: Responses
}

type Query {
  users: HighlightingSearch
  searchHighlight(index: String, query: String!): HighlightingSearch
  search(index: String, query: String!): [GlobalSearch]
  login(query: loginInput): Login
}

type Subscription {
  getUser: String
}
