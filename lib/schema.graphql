union GlobalSearch = User | Project | Gadget

type User {
  ID: ID
  name: String
  email: String
  password: String
  gadgets: [Gadget]
  projects: [Project]
  birthday: String
  publicKey: String
  privateKey: String
  result: String
  creation: TimeControl!
  lastUpdate: TimeControl
  socialId: [String]
  labels: [String]
}
type Project {
  ID: ID
  name: String
  description: String
  gadgets: [Gadget]
  owner: User
  active: Boolean
  collaborators: [Collaborator]
  creation: TimeControl
  lastUpdate: TimeControl
  labels: [String]
  publicKey: String
  privateKey: String
}
"Is the modules (arduino/rasberrypi/...) has been connection to the server"
type Gadget {
  ID: ID
  name: String
  description: String
  owner: User
  project: Project
  value: String
  active: Boolean
  creation: TimeControl
  lastUpdate: TimeControl
  collaborators: [Collaborator]
  labels: [String]
  publicKey: String
  privateKey: String
}
type Responses {
  ID: ID
  result: String
}
type TimeControl {
  user: User
  date: String
}
type Collaborator {
  user: User
  scope: String
}
type HighlightingSearch {
  body: [GlobalSearch]
  highlight: [[String]]
}

input timeControlInput {
  user: ID
  date: String
}

input userInput {
  name: String!
  email: String!
  password: String!
  birthday: String!
  labels: [String]
  gadgets: [ID]
  projects: [ID]
  lastUpdate: timeControlInput
  socialId: [String]
}

input updateUserInput {
  name: String
  email: String
  password: String
  birthday: String
  labels: [String]
  lastUpdate: timeControlInput
  socialId: [String]
}
input projectInput {
  name: String!
  description: String!
  gadgets: [ID]
  owner: ID!
  collaborators: [ID]
  labels: [String]
}
input updateProjectInput {
  name: String
  description: String
  collaborators: [ID]
  labels: [String]
}
input gadgetInput {
  name: String!
  description: String!
  project: ID!
  owner: ID!
  collaborators: [ID]
  value: String
  active: Boolean
  labels: [String]
}
input updateGadgetInput {
  name: String
  description: String
  collaborators: [ID]
  value: String
  active: Boolean
  labels: [String]
}

type Mutation {
  createUser(body: userInput): User!
  createProject(body: projectInput): Project!
  createGadget(body: gadgetInput): Gadget!
  updateUser(id: String!, body: updateUserInput): Responses!
  updateProject(id: String!, body: updateProjectInput): Responses!
  updateGadget(id: String!, body: updateGadgetInput): Responses!
  deleteUser(id: String!): Responses!
  deleteProject(id: String!): Responses!
  deleteGadget(id: String!): Responses!
}

type Query {
  users: HighlightingSearch
  searchHighlight(index: String, query: String!): HighlightingSearch
  search(index: String, query: String!): [GlobalSearch]
}
